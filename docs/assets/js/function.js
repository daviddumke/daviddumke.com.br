/* BOM DIA
 * Este c√≥digo foi desenvolvido por David Renato Dumke.
 * As opera√ß√µes s√£o simples, baseadas nas condi√ß√µes gerais do teste.
 * Algumas mudan√ßas foram feitas, por√©m documentadas.
 * N√£o foi utilizado nenhum conceito de POO ou nada similar, por motivo de tempo.
 */


/* IN√çCIO DAS FUN√á√ïES DE PARCELAMENTO
 * Os dados de parcelamento est√£o dispon√≠veis no JSONP, por√©m identifiquei uma
 * necessidade comum dos clientes (o valor m√≠nimo de parcela).
 * Para entregar um parcelamento adequado a esta realidade montei as fun√ß√µes abaixo,
 * que servem basicamente para encontrar um n√∫mero de parcelas e um valor correto de cada parcela.
 */


/* Subscrevendo math.ceil para arredondar casas decimais para cima
 * Esta mudan√ßa foi feita visando entregar sempre um valor de parcela arredondado para cima,
 * isto √© importante para evitar que um pre√ßo, ap√≥s parcelado acabe ficando menor.
 */
Math.ceil = (function() {
	var originalCeil = Math.ceil;
	return function(number, precision) {
		precision = Math.abs(parseInt(precision)) || 0;
		var multiplier = Math.pow(10, precision);
		return (originalCeil(number * multiplier) / multiplier);
	};
})();


/* Fun√ß√£o que retorna o parcelamento (n√∫mero de parcelas) baseado no pre√ßo, e 
 * levando em considera√ß√£o um valor m√≠nimo de parcela.
 */
function getInstallment(price)
{
	var priceInFloat = price.replace("R$ ", "").replace(",", ".");
	// Valor minimo da parcela
	valorMinimo = 49.99;
	return Math.floor(priceInFloat / valorMinimo);
}

/* Fun√ß√£o que retorna o valor do parcelamento baseado no pre√ßo e 
 * no n√∫mero de parcelas
 */
function getInstallmentValue(installment, price)
{
	var priceInFloat = price.replace("R$ ", "").replace(",", ".");
	return Math.ceil(priceInFloat/installment, 2).toFixed(2).toString().replace(".", ",");
}

/* FIM DAS FUN√á√ïES DE PARCELAMENTO
 * Ap√≥s usar estas fun√ß√µes ser√° entregue √†s vitrines pre√ßos parcelados, 
 * sendo que NUNCA ser√° mostrado uma parcela menor que R$ 49,99
 */


 function createControlsSlider(produtos)
 {
 	var productsPage = 3;
 	var slides = Math.ceil(produtos/productsPage);
 	checked = 'checked="checked"';
 	var htmlControls = '';
 	for (i = 1; i <= slides; i++) {
 		if (i > 1) {
 			checked = '';  			
 		}
	    htmlControls += '<input '+checked+' class="carousel__activator" id="carousel-slide-activator-'+i+'" name="carousel" type="radio">';
	};
	for (i = 1; i <= slides; i++) {		
		var anterior = parseInt(i) - parseInt(1);
		var proxima = parseInt(i) + parseInt(1);
		if (i > 1 && i < slides) {			  
			htmlControls += `<div class='carousel__controls'>
						      <label class='carousel__control carousel__control--backward' for='carousel-slide-activator-${anterior}'>
						        üëà
						      </label>
						      <label class='carousel__control carousel__control--forward' for='carousel-slide-activator-${proxima}'>
						        üëâ
						      </label>
						    </div>`;
		} else {
			if (i == 1) {
	 			htmlControls += `<div class='carousel__controls'>
							      <label class='carousel__control carousel__control--forward' for='carousel-slide-activator-2'>
							        üëâ
							      </label>
							    </div>`;  			
	 		}
	 		if (i == slides) {
	 			htmlControls += `<div class='carousel__controls'>
							      <label class='carousel__control carousel__control--backward' for='carousel-slide-activator-${anterior}'>
							        üëà
							      </label>
							    </div>`; 
	 		}
		}
	};	

	return htmlControls;
 }


/* IN√çCIO DA FUN√á√ÉO DE CALLBACK DA CHAORDIC
 * Motivado pelo uso do JSONP abaixo temos a fun√ß√£o que trata o retorno do JSON
 */
function X(data)
{

	/* Informa√ß√£o IMPORTANTE
	 * Resolvi utilizar Template Strings para montar os htmls das vitrines.
	 * A ideia aqui √©: 
	 *     1. Manter os c√≥digos visualmente claros;
	 *     2. Reutilizar c√≥digo;
	 *     3. Facilitar mudan√ßas no html, com fins de manuten√ß√£o;
	 * Os nomes das constantes e vari√°veis s√£o auto-explicativos.
	 *
	 * Obs.: Por motivo de tempo e falta de necessidade n√£o fiz uma abstra√ß√£o maior das fun√ß√µes, mas
	 * entendo que na utiliza√ß√£o de mais vitrines uma programa√ß√£o mais escal√°vel se faz necess√°ria.
	 * Por hora, criei tudo dentro desta mesma fun√ß√£o.
	 */

	const vitrineTitle = 'Vitrine de recomenda√ß√£o por produto';
	const productReferenceTitle = 'Voc√™ visitou';
	const productRecommendationTitle = 'e talvez se interesse por:';
	const productReference =  data.data.reference.item;
	const productRecommendation =  data.data.recommendation;


	// Html padr√£o do Produto Refer√™ncia:
	const htmlProductReference = `
	<div class="col-lg-12 product-item">
		<a href="${productReference.detailUrl}" class="text-center">
			<img class="img-responsive" src="${productReference.imageName}" />
			<p class="product-name text-left"> ${productReference.name.slice(0, 80)} ...</p>
			${productReference.oldPrice ? `<p class="old-price text-left"><del> De: <span class="old-price-value">${productReference.oldPrice}</span></del></p>` : ''}
			<p class="price text-left"> Por: <span class="price-value">${productReference.price}</span></p>
			<p class="installment text-left"> ou <span class="installment-parcel">${getInstallment(productReference.price)}</span>x de R$ <span class="installment-value">${getInstallmentValue(getInstallment(productReference.price), productReference.price)}</span></p>
			<p class="no-interest text-left"> sem juros</p>
		</a>
	</div>
	`;


	// Html padr√£o dos Produtos Recomendados:
	const htmlProductRecommendation = `
	${productRecommendation.map(product => `
	<div class="product-item carousel__item carousel__item--mobile-in-3 carousel__item--tablet-in-3 carousel__item--desktop-in-3">
		<a href="${product.detailUrl}" class="text-center">		
			<img class="img-responsive" src="${product.imageName}" />
			<p class="product-name text-left">${product.name.slice(0, 80)} ...</p>
			${product.oldPrice ? `<p class="old-price text-left"><del> De: <span class="old-price-value">${product.oldPrice}</span></del></p>` : ''}
			<p class="price text-left"> Por: <span class="price-value">${product.price}</span></p>
			<p class="installment text-left"> ou <span class="installment-parcel">${getInstallment(product.price)}</span>x de R$ <span class="installment-value">${getInstallmentValue(getInstallment(product.price), product.price)}</span></p>
			<p class="no-interest text-left"> sem juros</p>
		</a>
	</div>`).join('')} `;


	// Html padr√£o da Vitrine de Recomenda√ß√£o:
	const htmlVitrine = `
	<div class="row">
		<div class="col-lg-12">
			<h1 class="text-center text-uppercase font-weight-bold">${vitrineTitle}</h1>
		</div>
	</div>
	<div class="row">
		<div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
			<div class="row title">
				<div class="col-lg-12">
					<h4 class="font-weight-bold">${productReferenceTitle}</h4>
				</div>
			</div>	
			<div class="row">				
				${htmlProductReference}
			</div>
		</div>
		<div class="col-lg-9 col-md-9 col-sm-6 col-xs-12 recommendation-list-container">
			<div class="row title">
				<div class="col-lg-12">
					<h4 class="font-weight-bold">${productRecommendationTitle}</h4>
				</div>
			</div>
			<div class='row demo-container'>
		  		<div class='carousel'>
					${createControlsSlider(data.data.widget.size)} 
					<div class="carousel__screen">
						<div class="carousel__track">					
							${htmlProductRecommendation}
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
	`;

	// Insere os valores retornados dentro da div especificada
	document.getElementById("vitrine").innerHTML = htmlVitrine;

}

// C√≥digo respons√°vel pela leitura do JSONP
var script = document.createElement('script');
script.src = 'https://cors-anywhere.herokuapp.com/http://roberval.chaordicsystems.com/challenge/challenge.json?callback=X'

document.getElementsByTagName('head')[0].appendChild(script);